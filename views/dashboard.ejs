<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>User Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet" />
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gradient-to-br from-cyan-100 to-blue-100 min-h-screen font-poppins text-gray-800 p-6">

<% if (!user) { %>
  <div class="max-w-md mx-auto mt-20 p-8 bg-white rounded-lg shadow-lg text-center">
    <h1 class="text-2xl font-semibold mb-4">Welcome, Guest!</h1>
    <p class="mb-6">Please <a href="/login" class="text-blue-600 underline">log in</a> or <a href="/register" class="text-blue-600 underline">register</a> to access your dashboard.</p>
  </div>
<% } else { %>
  <div class="max-w-4xl mx-auto bg-white bg-opacity-90 rounded-lg shadow-lg p-8 space-y-10">
    <!-- Header -->
    <header class="flex flex-wrap items-center gap-4">
      <img
        src="<%= user.photos?.[0]?.value || '/default-profile.png' %>"
        alt="Profile"
        referrerpolicy="no-referrer"
        onerror="this.onerror=null;this.src='/default-profile.png';"
        class="w-16 h-16 rounded-full object-cover border-4 border-blue-500 bg-gray-100"
      />
      <h1 class="text-3xl font-semibold flex-grow">
        Hello, <%= user.displayName || user.name || 'User' %>
      </h1>
      <form action="/logout" method="POST" class="ml-auto">
        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-semibold transition">
          Logout
        </button>
      </form>
    </header>

    <!-- Devices -->
    <section class="mb-10 bg-white p-6 rounded shadow-md max-w-3xl mx-auto">
  <h2 class="text-2xl font-semibold mb-4 border-b border-gray-300 pb-2">Manage Devices</h2>

  <!-- Connect New Device -->
  <div class="mb-6">
    <button
      id="connect-device-btn"
      class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
    >
      Connect New Camera Device
    </button>
    <video
      id="live-preview"
      autoplay
      playsinline
      class="mt-4 w-full rounded shadow-lg hidden border border-gray-300"
      style="max-height: 300px;"
    ></video>
  </div>

  <!-- Devices List -->
  <% if (devices && devices.length > 0) { %>
    <ul class="space-y-3">
      <% devices.forEach(device => { %>
        <li class="flex justify-between items-center bg-gray-50 p-4 rounded shadow">
          <span><%= device.name %></span>
          <button class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700"
            onclick="openLiveView('<%= device.id %>')"
          >
            Live View
          </button>
        </li>
      <% }) %>
    </ul>
  <% } else { %>
    <p>No devices connected yet.</p>
  <% } %>
</section>

    <!-- Storage Options -->
    <section>
      <h2 class="text-2xl font-semibold mb-4 border-b border-gray-300 pb-2">Storage Options</h2>
      <form id="storage-form" class="flex gap-6 items-center">
        <label class="inline-flex items-center gap-2 cursor-pointer">
          <input type="radio" name="storage" value="local" <%= user.storage === 'local' ? 'checked' : '' %> class="form-radio h-5 w-5 text-blue-600" />
          <span>Local Storage</span>
        </label>
        <label class="inline-flex items-center gap-2 cursor-pointer">
          <input type="radio" name="storage" value="cloud" <%= user.storage === 'cloud' ? 'checked' : '' %> class="form-radio h-5 w-5 text-blue-600" />
          <span>Cloud Storage</span>
        </label>
        <button type="submit" class="ml-auto bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-semibold">Save</button>
      </form>
    </section>

    <!-- Live Camera -->
    <section class="p-4 bg-white shadow-md rounded-lg border border-gray-200">
      <h2 class="text-2xl font-bold mb-4 text-gray-800 border-b pb-2 border-gray-300">Live Camera Feed</h2>
    
      <div
        id="live-video"
        class="rounded-xl border border-gray-300 overflow-hidden shadow-inner max-w-full max-h-96 bg-black flex items-center justify-center text-white"
        style="height: 360px;"
      >
        <video id="camera-stream" autoplay muted playsinline class="w-full h-full object-cover"></video>
      </div>
    
      <div class="mt-6 flex flex-wrap items-center gap-4">
        <label for="storageOption" class="text-sm font-medium text-gray-700">Save to:</label>
        <select id="storageOption" class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
          <option value="local">Local</option>
          <option value="cloud">Cloud</option>
        </select>
    
        <button id="startRecord"
          class="flex items-center gap-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow transition"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" d="M5 12h14M12 5l7 7-7 7"></path>
          </svg>
          <span>Start</span>
        </button>
    
        <button id="stopRecord"
          class="flex items-center gap-2 px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg shadow transition"
          disabled
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <rect x="6" y="6" width="12" height="12" rx="2" />
          </svg>
          <span>Stop & Save</span>
        </button>
      </div>
    </section>


    <!-- Recorded Videos (Subscription gated) -->
    <section>
      <h2 class="text-2xl font-semibold mb-4 border-b border-gray-300 pb-2">Recorded Videos</h2>
      <% if (!user.isSubscribed) { %>
        <div class="p-6 bg-yellow-100 rounded border border-yellow-300 text-yellow-800">
          You need to <a href="/subscribe" class="underline font-semibold text-yellow-900">subscribe</a> to access recorded videos.
        </div>
      <% } else { %>
        <% if (!recordedVideos || recordedVideos.length === 0) { %>
          <p class="text-gray-500 italic">No recorded videos available.</p>
        <% } else { %>
          <ul class="space-y-3">
            <% recordedVideos.forEach(video => { %>
              <li class="flex justify-between bg-gray-50 p-4 rounded shadow items-center">
                <span><%= video.name %></span>
                <button class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded" onclick="playVideo('<%= video.url %>')">Play</button>
              </li>
            <% }); %>
          </ul>
        <% } %>
      <% } %>
    </section>

    <!-- Video Player (only if subscribed) -->
    <% if (user.isSubscribed) { %>
      <section>
        <h2>Recorded Videos</h2>
        
        <ul>
          <% if (videos.length > 0) { %>
            <% videos.forEach(video => { %>
              <li>
                <strong><%= video.filename %></strong> 
                (<%= new Date(video.uploadedAt).toLocaleString() %>)
                <button onclick="playVideo('<%= video.filepath %>')">Play</button>
              </li>
            <% }) %>
          <% } else { %>
            <li>No videos uploaded yet.</li>
          <% } %>
        </ul>
        
        <div id="videoPlayerContainer" style="margin-top:20px; display:none;">
          <video id="videoPlayer" width="640" height="360" controls>
            Your browser does not support the video tag.
          </video>
          <br/>
          <button onclick="fastForward()">Fast Forward</button>
          <button onclick="slowMotion()">Slow Motion</button>
          <button onclick="pauseVideo()">Pause</button>
          <button onclick="playVideo()">Play</button>
        </div>
      </section>
    <% } %>
  </div>
  
  <script>
          const videoPlayer = document.getElementById('videoPlayer');
          const videoPlayerContainer = document.getElementById('videoPlayerContainer');
        
          function playVideo(src) {
            videoPlayer.src = '/' + src.replace(/\\/g, '/'); // Fix Windows path separator
            videoPlayer.playbackRate = 1;
            videoPlayerContainer.style.display = 'block';
            videoPlayer.play();
          }
        
          function fastForward() {
            videoPlayer.playbackRate = Math.min(videoPlayer.playbackRate + 0.5, 4);
          }
        
          function slowMotion() {
            videoPlayer.playbackRate = Math.max(videoPlayer.playbackRate - 0.5, 0.25);
          }
        
          function pauseVideo() {
            videoPlayer.pause();
          }
        
          function playVideoControl() {
            videoPlayer.play();
          }
        </script>
  
      <script>
      const connectBtn = document.getElementById('connect-device-btn');
      const livePreview = document.getElementById('live-preview');
    
      let currentStream = null;
    
      connectBtn.addEventListener('click', async () => {
        try {
          // Request camera access
          const stream = await navigator.mediaDevices.getUserMedia({ video: true });
          livePreview.srcObject = stream;
          livePreview.classList.remove('hidden');
    
          // Save the stream so we can stop it later if needed
          if (currentStream) {
            currentStream.getTracks().forEach(track => track.stop());
          }
          currentStream = stream;
    
          // Ask user to name their device
          const deviceName = prompt('Enter a name for your new device:', 'My Camera Device');
          if (!deviceName) {
            alert('Device name is required to register the device.');
            stream.getTracks().forEach(track => track.stop());
            livePreview.classList.add('hidden');
            return;
          }
    
          // Send device registration request to backend
          // This is a stub, you need to implement this route in backend to save device info
          const response = await fetch('/api/devices/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ deviceName })
          });
    
          if (response.ok) {
            alert('Device registered successfully!');
            // Optionally refresh the page or update device list via AJAX
            window.location.reload();
          } else {
            alert('Failed to register device. Please try again.');
            stream.getTracks().forEach(track => track.stop());
            livePreview.classList.add('hidden');
          }
    
        } catch (error) {
          alert('Error accessing camera: ' + error.message);
        }
      });
    
      function openLiveView(deviceId) {
        // Open live stream page or modal for deviceId
        // This depends on your backend live streaming implementation
        window.open(`/devices/${deviceId}/live`, '_blank');
      }
    </script>
    
    <script>
  let mediaRecorder;
  let recordedChunks = [];

  const video = document.getElementById('camera-stream');
  const startBtn = document.getElementById('startRecord');
  const stopBtn = document.getElementById('stopRecord');
  const storageSelect = document.getElementById('storageOption');

  async function startCamera() {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
      video.srcObject = stream;

      mediaRecorder = new MediaRecorder(stream);
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) recordedChunks.push(event.data);
      };

      mediaRecorder.onstop = async () => {
        const blob = new Blob(recordedChunks, { type: 'video/webm' });
        const formData = new FormData();
        formData.append('video', blob, `recording-${Date.now()}.webm`);

        const storageType = storageSelect.value;
        const endpoint = storageType === 'cloud' ? '/api/videos/upload/cloud' : '/api/videos/upload/local';

        try {
          const res = await fetch(endpoint, { method: 'POST', body: formData });
          const result = await res.json();
          alert(`Video saved: ${result.url || result.message}`);
        } catch (err) {
          console.error(err);
          alert('Upload failed');
        }

        recordedChunks = [];
      };
    } catch (err) {
      console.error('Camera access denied', err);
    }
  }

  startBtn.onclick = () => {
    mediaRecorder.start();
    startBtn.disabled = true;
    stopBtn.disabled = false;
  };

  stopBtn.onclick = () => {
    mediaRecorder.stop();
    startBtn.disabled = false;
    stopBtn.disabled = true;
  };

  window.onload = startCamera;
</script>


  <script>
    // Playback speed control
    function setSpeed(speed) {
      const player = document.getElementById('video-player');
      player.playbackRate = speed;
    }

    // Play selected recorded video
    function playVideo(url) {
      const videoPlayer = document.getElementById('video-player');
      const source = document.getElementById('video-source');
      source.src = url;
      videoPlayer.load();
      videoPlayer.play();
      // Scroll to player smoothly
      videoPlayer.scrollIntoView({ behavior: 'smooth' });
    }

    // Placeholder functions for device management & adding
    function manageDevice(deviceId) {
      alert('Manage device with ID: ' + deviceId);
      // Implement real logic
    }
    function addDevice() {
      alert('Add device clicked');
      // Implement real logic
    }

    // Storage option form submit handler (for demo)
    document.getElementById('storage-form').addEventListener('submit', e => {
      e.preventDefault();
      const storage = document.querySelector('input[name="storage"]:checked').value;
      alert('Storage option saved: ' + storage);
      // Implement real save logic, e.g. send to backend via fetch/AJAX
    });

    // Live camera access using WebRTC - minimal example
    async function startLiveCamera() {
      const liveVideoDiv = document.getElementById('live-video');
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
        liveVideoDiv.innerHTML = '';
        const videoElem = document.createElement('video');
        videoElem.srcObject = stream;
        videoElem.autoplay = true;
        videoElem.muted = true;
        videoElem.className = 'w-full h-full object-cover rounded-lg';
        liveVideoDiv.appendChild(videoElem);
      } catch (error) {
        liveVideoDiv.innerHTML = '<p class="text-red-600 text-center p-4">Could not access the camera.</p>';
      }
    }
    startLiveCamera();
  </script>
<% } %>

</body>
</html>
